/**
* 
* @file     luacall
* @brief    Copyright (C) 2012  yayanyang All Rights Reserved 
* @author   yayanyang
* @version  1.0.0.0  
* @date     2012/07/19
*/
#ifndef LEMONXX_LUABIND_LUACALL_HPP
#define LEMONXX_LUABIND_LUACALL_HPP
#include <lemonxx/luabind/function.hpp>
#include <lemonxx/luabind/type_trait.hpp>


namespace lemon{namespace luabind{

	inline void luacall(state & L,const char * name)
	{
		assert(name && "luacall expects a function name");

		auto_pop_stack stack(L);

		lua_getglobal(L,name);

		call_function(L,name,0,0);
	}

	template<typename R>
	inline R luacall(state & L,const char * name)
	{
		typedef typename remove_cv<R>::type result_type;

		assert(name && "luacall expects a function name");

		auto_pop_stack stack(L);

		lua_getglobal(L,name);

		call_function(L,name,0,type_trait<result_type>::nresults::value);

		return type_trait<result_type>::from_lua(L);
	}

	$$
	template<typename R$ ,typename A<i>$(0,<<i>>)>
	inline R luacall(state & L,const char * name$ ,A<i> a<i>$(0,<<i>>))
	{
		typedef typename remove_cv<R>::type result_type;

		assert(name && "luacall expects a function name");

		auto_pop_stack stack(L);

		lua_getglobal(L,name);
		$
		type_trait<typename remove_cv< A<i> >::type>::to_lua(L,a<i>);
		$(0,<<i>>)
		call_function(L,name,<<i>> + 1,type_trait<result_type>::nresults::value);

		return type_trait<result_type>::from_lua(L);
	}
	$$(0,max)
}}

#endif //LEMONXX_LUABIND_LUACALL_HPP